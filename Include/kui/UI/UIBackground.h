#pragma once
#include "UIBox.h"
#include "../Vec3.h"
#include "../Vec2.h"

namespace kui
{
	class Shader;
	struct VertexBuffer;

	/**
	 * @brief
	 * UI element that draws a square over the space it occupies.
	 *
	 * The UIBackground class can have a color, opacity and texture.
	 */
	class UIBackground : public UIBox
	{
	protected:
		void ScrollTick(Shader* UsedShader);
		void MakeGLBuffers();
		bool OwnsTexture = false;
		bool UseTexture = false;
		uint8_t CornerFlags = 0b1111;
		uint8_t BorderFlags = 0b1111;
		virtual void DrawBackground();
		Vec3f Color;
		VertexBuffer* BoxVertexBuffer = nullptr;
		unsigned int TextureID = 0;
		float Opacity = 1;
		Vec3f ColorMultiplier = 1;
		static float GetBorderSize(UISize InSize);

	public:
		Shader* BackgroundShader = nullptr;
		bool HasTexture() const
		{
			return UseTexture;
		}

		Vec3f BorderColor = 1;
		UISize BorderRadius = 0;
		UISize CornerRadius = 0;

		/**
		 * @brief
		 * Sets the opacity of the UIBackground.
		 * 
		 * An opacity of 1 is fully visible, an opacity of 0 is completely transparent.
		 */
		UIBackground* SetOpacity(float NewOpacity);

		UIBackground* SetBorderColor(Vec3f NewColor);

		/**
		 * @brief
		 * Returns the opacity of the UIBackground.
		 */
		float GetOpacity() const;

		/**
		 * @brief
		 * Sets the color of the UIBackground.
		 */
		virtual UIBackground* SetColor(Vec3f NewColor);

		/**
		 * @brief
		 * Returns the color of the UIBackground.
		 */
		virtual Vec3f GetColor() const;

		/**
		 * @brief
		 * Sets an image used by this UIBackground.
		 * 
		 * The texture will have the color of the UIBackground.
		 * 
		 * @param UseTexture
		 * True if the background should use a texture. False if not.
		 * 
		 * @param TextureID
		 * The ID of any texture generated by kui::image::LoadImage() (or any OpenGL texture object).
		 */
		UIBackground* SetUseTexture(bool UseTexture, unsigned int TextureID = 0);
		UIBackground* SetUseTexture(bool UseTexture, std::string TextureFile);

		UIBackground* SetBorder(UISize BorderSize, Vec3f Color);
		UIBackground* SetBorderEdges(bool Top, bool Down, bool Left, bool Right);
		UIBackground* SetBorderVisible(int Index, bool Value);

		UIBackground* SetCorner(UISize CornerSize);
		UIBackground* SetCorners(bool TopLeft, bool TopRight, bool BottomLeft, bool BottomRight);
		UIBackground* SetCornerVisible(int Index, bool Value);

		/**
		 * @brief
		 * UIBackground constructor.
		 * 
		 * @param Horizontal
		 * True if the children should be laid out horizontally, false if vertically.
		 * 
		 * @param Position
		 * The position of the UIBackground. If it has a parent, this will be ignored.
		 * 
		 * @param Color
		 * The color of the UIBackground.
		 * 
		 * @param MinScale
		 * The MinScale value of the UIBackground.
		 * 
		 * @param UsedShader
		 * The shader used by the UIBackground. If this is nullptr, the default shader is used.
		 */
		UIBackground(bool Horizontal, Vec2f Position, Vec3f Color, SizeVec MinScale = SizeVec::Smallest(), Shader* UsedShader = nullptr);
		virtual ~UIBackground();
		virtual void Draw() override;
		void Update() override;
		void OnAttached() override;
	};
}